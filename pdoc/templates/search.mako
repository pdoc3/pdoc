<%
    import pdoc
%>

<!doctype html>
<html lang="${html_lang}">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, minimum-scale=1" />
  <meta name="generator" content="pdoc ${pdoc.__version__}" />

  <title>Search the documentation</title>
  <meta name="description" content="Search the documentation." />

  <%namespace name="css" file="css.mako" />
  <style>${css.mobile()}</style>
  <style media="screen and (min-width: 700px)">${css.desktop()}</style>
  <style media="print">${css.print()}</style>

  <%include file="head.mako"/>
</head>
<body>
<main>
<article id="content">
  <h1>Search the docs</h1>
  <h3 id="search-status"></h3>
  <div id="search-results"></div>
  <noscript>
  <h3>JavaScript is not supported/enabled in your browser, so the search function will not work.</h3>
  </noscript>
</article>

<nav id="sidebar">
  <form id="search-bar-form" method="GET">
    <div class="search-nav-container">
      <input type="text" id="search-box" class="search-input" name="q" placeholder="Search the docs...">
    </div>
  </form>
  <h1><a href="${module.url().split('/')[-1]}">Back to index</a></h1>
</nav>
</main>
</body>

<footer id="footer">
    <%include file="credits.mako"/>
    <p>Generated by <a href="https://pdoc3.github.io/pdoc"><cite>pdoc</cite> ${pdoc.__version__}</a>.</p>
    <p>Search done using <a href="https://lunrjs.com"><cite>lunr.js</cite> 2.3.8</a>.</p>
</footer>

<script src="index.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/lunr.js/2.3.8/lunr.js" integrity="sha256-JZUIb2pF9vF82f9JemSl6XISUBX4tvjrprJM21J63G8=" crossorigin></script>
<script>
const RESULT_CONTENT_CHARS_LIMIT = 180
var searchStatus = document.getElementById('search-status');
var searchResults = document.getElementById('search-results');
var searchInput = document.getElementById('search-box');
var idx = null;
var query = new URLSearchParams(window.location.search).get('q');
searchInput.value = query
search(searchInput.value);

function search(query) {
    try {
        _search(query);
    } catch (exception){
        // This is just to give feedback to the user but still allow developers to see what went wrong
        searchStatus.innerHTML = `Something went wrong and the results couldn't get displayed.`;
        throw exception
    };
};

function _search(query) {
    if (idx === null){
        idx = lunr(function () {
                this.ref('ref');
                this.field('refname', {'boost':10});
                this.field('name', {'boost': 5});
                this.field('docstring');
                this.metadataWhitelist = ['position'];

                var doc;
                Object.keys(index).forEach(function (key) {
                    doc = index[key];
                    doc['ref'] = key;
                    this.add(doc);
                }, this);
            });        
    };

    if (query === null || query === '') {
        searchStatus.innerHTML = 'No query provided so there is nothing to search.';
        searchStatus.innerHTML = JSON.stringify(idx);
        return null;
    };

    var fuzziness = ${lunr_search.get('fuzziness', 1)};
    if (fuzziness != 0) {
        query += "~" + fuzziness;
    };
        
    var results = idx.search(query);

    if (results.length == 0) {
        searchStatus.innerHTML = 'No results have been found for your search. Make sure that all words are spelled correctly.';
    } else {
        var ul = document.createElement('ul');
        var count = 0;
        results.forEach(function(result) {
            var liLink = '<a href="' + result.ref + '">' + index[result.ref].refname + '</a>';

            Object.keys(result.matchData.metadata).forEach(function (term) {
                if (!('name' in result.matchData.metadata[term] || 'refname' in result.matchData.metadata[term])) {
                    var docstring = index[result.ref].docstring;

                    result.matchData.metadata[term].docstring.position.forEach(function(positions) {
                        var start;
                        if (positions[0] - RESULT_CONTENT_CHARS_LIMIT > 0) {
                            start = '...' + docstring.slice(positions[0] - RESULT_CONTENT_CHARS_LIMIT, positions[0]);
                        } else {
                            start = docstring.slice(0, positions[0]);
                        };

                        var match = docstring.slice(positions[0], positions[0] + positions[1]);

                        var end;
                        if (positions[0] + positions[1] + RESULT_CONTENT_CHARS_LIMIT < docstring.length) {
                            end = docstring.slice(positions[0] + positions[1], positions[0] + positions[1] + RESULT_CONTENT_CHARS_LIMIT) + '...';
                        } else {
                            end = docstring.slice(positions[0] + positions[1], docstring.length);
                        };

                        var liContent = '<div class="content">' + start + '<mark>' + match + '</mark>' + end + '</div>';

                        var li = document.createElement('li');
                        li.innerHTML = liLink + liContent;
                        ul.appendChild(li);
                        count += 1
                     });
                } else {
                    var li = document.createElement('li');
                    li.innerHTML = liLink;
                    ul.appendChild(li);
                    count += 1
                };
            });
        });

        searchResults.appendChild(ul);
        searchStatus.innerHTML = 'Your search brought back ' + count + ' result(s):';
    };
};
</script>
