<%
    import pdoc
%>

<!doctype html>
<html lang="${html_lang}">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, minimum-scale=1" />
  <meta name="generator" content="pdoc ${pdoc.__version__}" />

  <title>Search the documentation</title>
  <meta name="description" content="Search the documentation." />

  <%namespace name="css" file="css.mako" />
  <style>${css.mobile()}</style>
  <style media="screen and (min-width: 700px)">${css.desktop()}</style>
  <style media="print">${css.print()}</style>

  <%include file="head.mako"/>
</head>
<body>
<main>
<article id="content">
  <h1>Search the docs</h1>
  <h3 id="search-status"></h3>
  <ul id="search-results"></ul>
  <noscript>
  <h3>JavaScript is not supported/enabled in your browser, so the search function will not work.</h3>
  </noscript>
</article>

<nav id="sidebar">
  <form>
      <input id="lunr-search" class="search-input" name="q" placeholder="Search ...">
  </form>
  <h1><a href="${module.url().split('/')[-1]}">Back to index</a></h1>
</nav>
</main>

<footer id="footer">
    <%include file="credits.mako"/>
    <p>Generated by <a href="https://pdoc3.github.io/pdoc"><cite>pdoc</cite> ${pdoc.__version__}</a>.</p>
    <p>Search done using <a href="https://lunrjs.com"><cite>lunr.js</cite> 2.3.8</a>.</p>
</footer>

<script src="index.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/lunr.js/2.3.8/lunr.min.js" integrity="sha512-HiJdkRySzXhiUcX2VweXaiy8yeY212ep/j51zR/z5IPCX4ZUOxaf6naJ/0dQL/2l+ZL+B9in/u4nT8QJZ/3mig==" crossorigin></script>
<script>
const PAD_CHARS = 30
var searchStatus = document.getElementById('search-status');
var searchResults = document.getElementById('search-results');
var searchInput = document.getElementById('lunr-search');
var idx = null;
var query = new URLSearchParams(window.location.search).get('q');
searchInput.value = query
search(searchInput.value);

function search(query) {
    try {
        _search(query);
    } catch (exception){
        // This is just to give feedback to the user but still allow developers to see what went wrong
        searchStatus.innerHTML = `Something went wrong and the results couldn't get displayed.`;
        throw exception
    };
};

function _search(query) {
    if (idx === null){
        idx = lunr(function () {
                this.ref('i');
                this.field('ref', {boost: 5});
                this.field('name', {boost: 10});
                this.field('doc');
                this.metadataWhitelist = ['position'];

                INDEX.forEach((doc, i) => {
                    const parts = doc.ref.split('.');
                    doc['name'] = parts[parts.length - 1];
                    doc['i'] = i;

                    this.add(doc);
                }, this);
            });
    };

    if (query === null || query === '') {
        searchStatus.innerHTML = 'No query provided so there is nothing to search.';
        return null;
    };

    var fuzziness = ${lunr_search.get('fuzziness', 1)};
    if (fuzziness != 0) {
        query += "~" + fuzziness;
    };
        
    var results = idx.search(query);

    if (results.length == 0) {
        searchStatus.innerHTML = 'No results have been found for your search. Make sure that all words are spelled correctly.';
    } else {
        results.forEach(function(result) {
            const dobj = INDEX[parseInt(result.ref)];
            const url = URLS[dobj.url] + '#' + dobj.ref;
            const pretty_name = dobj.ref + (dobj.func ? '()' : '');
            const docstring = dobj.doc;

            let text = Object.values(result.matchData.metadata)
                    .filter(({doc}) => doc !== undefined)
                    .map(({doc: {position}}) => {
                        return position.map(([start, length]) => {
                            const end = start + length;
                            return [
                                start,
                                (start - PAD_CHARS > 0 ? '…' : '') +
                                docstring.substring(start - PAD_CHARS, start) +
                                '<mark>' + docstring.slice(start, end) + '</mark>' +
                                docstring.substring(end, end + PAD_CHARS) +
                                (end + PAD_CHARS < docstring.length ? '…' : '')
                            ];
                        });
                    })
                    .flat()
                    .sort(([pos1,], [pos2,]) => pos1 - pos2)
                    .map(([, text]) => text)
                    .join('')
                    .replace(/……/g, '…');

            if (text)
                text = '<div>' + text + '</div>';
            text = '<a href="' + url + '">'  + pretty_name + '</a>' + text;

            const li = document.createElement('li');
            li.innerHTML = text;
            searchResults.appendChild(li);
         });

        searchStatus.innerHTML = 'Your search yielded ' + results.length + ' result(s):';
    };
};
</script>
</body>
